#!/bin/bash

# source this script to provide read-access to global config variables exported from your lua script

# Copyright (c) 2016-2017 DarkCaster, MIT License, see https://github.com/DarkCaster/Bash-Lua-Helper for more info

#TODO: store all generated stuff not in temporary plain-text files, but somewhere else

lua_helper_dir="$( cd "$( dirname "$BASH_SOURCE" )" && pwd )"

lua_cache_dir=`mktemp -d -t lua-helper-XXXXXXXX`
lua_startup_params=()
lua_startup_param_cnt=0
lua_params_shift=0
lua_result_name="cfg"
lua_export_list_name="cfg_list"

lua_add_param() {
 lua_startup_params[$lua_startup_param_cnt]="$@"
 lua_startup_param_cnt=$((lua_startup_param_cnt+1))
}

lua_helper_log_error () {
 >&2 echo "$@"
}

lua_helper_teardown () {
 rm -rf "$lua_cache_dir"
 true
}

lua_helper_showusage () {
 lua_helper_log_error ""
 lua_helper_log_error "usage: . lua-helper.sh.in <main lua script> <options>"
 lua_helper_log_error ""
 lua_helper_log_error "mandatory options:"
 lua_helper_log_error "-e <name> global variable from lua script to export (if variable is a table, this will export all fields recursively)"
 lua_helper_log_error " you can pass multiple -e options"
 lua_helper_log_error ""
 lua_helper_log_error "other options:"
 lua_helper_log_error "-b <pre script> lua script, that will be executed in context of loader.lua, just before main script"
 lua_helper_log_error "-a <post script> lua script, that will be executed in context of loader.lua, after main script."
 lua_helper_log_error " this script will have access to all global variables and context changes that main script has made"
 lua_helper_log_error "-o <string> add extra user string to loader.extra table (indexed by number starting from 1). multiple options can be selected"
 lua_helper_log_error "-w <dir> non default work directory. will be stored at loader.workdir. by default, config file base directory will be used"
 lua_helper_log_error "-r <associative array name> name of associative array, that will contain all exported variables from lua script. by default will be used name \"cfg\""
 lua_helper_log_error "-l <variable name> custom variable name that will contain list (multiline) of all exported variables. by default will be used name \"cfg_list\""
 lua_helper_log_error "-x terminate command list for this script. all command line parameters after this option will be transferred to your lua config file,"
 lua_helper_log_error " and will be stored in loader.args table starting from index 1"
 lua_helper_log_error "-t <temp directory> manually set base directory for temporary files that lua-helper create while exporting selected lua variables."
 lua_helper_log_error " this directory will be automatically detected if omited: it will probe XDG_RUNTIME_DIR, /tmp, and will use one that mounted on tmpfs"
 lua_helper_log_error "-h show this help"
 lua_helper_log_error ""
 lua_helper_log_error "options to override lua binary detection logic."
 lua_helper_log_error "by default, only supported lua versions at standard paths will be used."
 lua_helper_log_error "for now it will search and use lua with versions from 5.2.0 to 5.3.999"
 lua_helper_log_error "-y <version> enforce min lua version. if this option passed without Y option, it will not enforce max lua version (and print warning)"
 lua_helper_log_error "-Y <version> enforce max lua version. if this option passed without y option, it will not enforce min lua version (and print warning)"
 lua_helper_log_error "-z <path to lua binary> enforce path to lua binary, do not perform automatic search for lua binary."
 lua_helper_teardown
 exit 100
}

lua_helper_check_bad_chars () {
 local target="$1"
 local msg_pre="$2"
 # used conventions from here: https://www.lua.org/pil/1.3.html
 # but letters restricted to latin
 if [ ! -z "$target" ] && [[ $target =~ ^[a-zA-Z_][a-zA-Z_0-9.]*$ ]]; then
  return 0
 else
  lua_helper_log_error "$msg_pre contain characters restricted for use with lua"
  lua_helper_teardown
  exit 1
 fi
}

lua_helper_check_bad_chars_bash () {
 local target="$1"
 local msg_pre="$2"
 if [ ! -z "$target" ] && [[ $target =~ ^[a-zA-Z_][a-zA-Z_0-9]*$ ]]; then
  return 0
 else
  lua_helper_log_error "$msg_pre may only contain letters, numbers or underscores, and not start with number"
  lua_helper_teardown
  exit 1
 fi
}

lua_config_script="$1"
test -z "$lua_config_script" && lua_helper_showusage
test ! -e "$lua_config_script" && lua_helper_log_error "main config file not found" && lua_helper_showusage
lua_config_script=`realpath -s "$lua_config_script"`
lua_workdir=`dirname $lua_config_script`
lua_add_param "-c"
lua_add_param "$lua_config_script"
lua_add_param "-t"
lua_add_param "$lua_cache_dir"
shift 1

lua_binary=""
lua_min_version=""
lua_act_version=""

lua_helper_parseopts () {
 local lua_pre_script=""
 local lua_post_script=""
 local optname
 while getopts ":e:b:a:o:w:r:l:y:Y:z:hx" optname
 do
  case "$optname" in
   "e")
     lua_helper_check_bad_chars "$OPTARG" "exported global variable"
     lua_add_param "-e"
     lua_add_param "$OPTARG"
   ;;
   "b")
     test ! -z "$lua_pre_script" && lua_helper_log_error "multiple -b options detected" && lua_helper_showusage
     lua_pre_script="$OPTARG"
     test ! -e "$lua_pre_script" && lua_helper_log_error "pre script not found" && lua_helper_showusage
     lua_add_param "-pre"
     lua_add_param "$OPTARG"
   ;;
   "a")
     test ! -z "$lua_post_script" && lua_helper_log_error "multiple -a options detected" && lua_helper_showusage
     lua_post_script="$OPTARG"
     test ! -e "$lua_post_script" && lua_helper_log_error "post script not found" && lua_helper_showusage
     lua_add_param "-post"
     lua_add_param "$OPTARG"
   ;;
   "o")
     lua_add_param "-ext"
     lua_add_param "$OPTARG"
   ;;
   "w")
     lua_workdir="$OPTARG"
   ;;
   "r")
     lua_helper_check_bad_chars_bash "$OPTARG" "result associative array name"
     lua_result_name="$OPTARG"
   ;;
   "l")
     lua_helper_check_bad_chars_bash "$OPTARG" "export list variable name"
     lua_export_list_name="$OPTARG"
   ;;
   "y")
     lua_min_version="$OPTARG"
   ;;
   "Y")
     lua_max_version="$OPTARG"
   ;;
   "z")
     lua_binary="$OPTARG"
   ;;
   "x")
     break
   ;;
   "h")
     lua_helper_showusage
   ;;
   "?")
     lua_helper_log_error "Unknown option $OPTARG"
     lua_helper_showusage
   ;;
   ":")
     lua_helper_log_error "No argument given for option $OPTARG"
     lua_helper_showusage
   ;;
   *)
     # Should not occur
     lua_helper_log_error "Unknown error while processing options"
     lua_helper_showusage
   ;;
  esac
 done
 lua_params_shift=$((OPTIND-1))
 test -z "$lua_workdir" && lua_helper_log_error "workdir is empty string" && lua_helper_showusage
 lua_add_param "-w"
 lua_add_param "$lua_workdir"
}

lua_helper_parseopts "$@"
shift $lua_params_shift
lua_add_param "--"

lua_probe_version() {
 local lua_binary="$1"
 local min_version=( $2 )
 local max_version=( $3 )
 lua_act_version=`2>&1 "$lua_binary" -v | sed -n "s|^Lua\s\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*\$|\1 \2 \3|p"`
 test -z "$lua_act_version" && return 1
 lua_act_version=( $lua_act_version )
 local cnt="-1"
 for act_num in "${lua_act_version[@]}"
 do
  cnt=$((cnt+1))
  test "$act_num" -ge "${min_version[$cnt]}" -a "$act_num" -le "${max_version[$cnt]}" && continue || return 1
 done
 return 0
}

lua_probe_binary() {
 local hints=( $1 )
 local min_version="$2"
 local max_version="$3"
 test ! -z "$lua_binary" && hints=( "$lua_binary" ) && lua_binary=""
 min_version=`echo "$min_version" | sed -n "s|\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)|\1 \2 \3|p"`
 test -z "$min_version" && lua_helper_log_error "incorrect minimum version string! (it must be a 3 numbers delimited with dots, for example 5.2.0 or 5.3.1)" && exit 1
 max_version=`echo "$max_version" | sed -n "s|\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)|\1 \2 \3|p"`
 test -z "$max_version" && lua_helper_log_error "incorrect maximum version string! (it must be a 3 numbers delimited with dots, for example 5.2.0 or 5.3.1)" && exit 1
 for hint in "${hints[@]}"
 do
  hint=`2>/dev/null which "$hint"`
  #debug
  #echo "probing lua binary: $hint"
  if [ ! -z "$hint" ] && lua_probe_version "$hint" "$min_version" "$max_version"; then
   lua_binary="$hint"
   break
  fi
 done
}

if [ -z "$lua_min_version" ] && [ -z "$lua_max_version" ]; then
 lua_min_version="5.1.0"
 lua_max_version="5.3.999"
elif [ -z "$lua_min_version" ] && [ ! -z "$lua_max_version" ]; then
 lua_min_version="0.0.0"
 lua_helper_log_error "restricting lua max version only, it may not work as intended if your lua interpreter is too old"
elif [ ! -z "$lua_min_version" ] && [ -z "$lua_max_version" ]; then
 lua_max_version="999.999.999"
 lua_helper_log_error "restricting lua min version only, it may not work as intended if your lua interpreter is too new and not tested!"
fi

if [ ! -z "$lua_binary" ]; then
 lua_helper_log_error "probing enforced lua binary at $lua_binary"
 lua_hint="$lua_binary"
 lua_binary=""
 lua_probe_binary "$lua_hint" "$lua_min_version" "$lua_max_version"
else
 lua_probe_binary "lua lua5.3 lua53 lua5.2 lua52 lua5.1 lua51" "$lua_min_version" "$lua_max_version"
fi


test -z "$lua_binary" && lua_helper_log_error "failed to detect lua interpreter with proper version!" && exit 1
#debug
#echo "using lua binary: $lua_binary"

"$lua_binary" "$lua_helper_dir/loader.lua" -ver "${lua_act_version[@]}" "${lua_startup_params[@]}" "$@"

if [ "$?" != "0" ]; then
 lua_helper_log_error "loader.lua script failed"
 lua_helper_teardown
 exit 1
fi

#create result associative array and fill it with global variables exported from lua config.
#see example.bash for usage details
declare -A "$lua_result_name"

lua_helper_fill_result () {
 while read target
 do
  #should not occur, if you do not touch anything inside loader.tmpdir from lua scripts
  lua_helper_check_bad_chars "$target" "filename with exported variable contents \"$target\""
  eval $lua_result_name'['$target']'='$(<"'"$lua_cache_dir/$target"'")'
 done < <(ls -1 "$lua_cache_dir")
}

lua_helper_fill_result

#create list (multiline variable) with all exported variables names
eval $lua_export_list_name'=`ls -1 "'"$lua_cache_dir"'"`'

lua_helper_teardown

#create helper function to check variable availability
eval 'check_lua_export () {
 [ ! -z `echo "$'$lua_export_list_name'" | grep -x "$@"` ]
}'

#perform environment cleanup
unset -f lua_helper_fill_result
unset -f lua_helper_parseopts
unset -f lua_helper_check_bad_chars
unset -f lua_helper_check_bad_chars_bash
unset -f lua_helper_showusage
unset -f lua_helper_teardown
unset -f lua_helper_log_error
unset -f lua_add_param
unset -f lua_probe_version
unset -f lua_probe_binary
unset lua_helper_dir
unset lua_cache_dir
unset lua_startup_params
unset lua_startup_param_cnt
unset lua_params_shift
unset lua_result_name
unset lua_export_list_name
unset lua_config_script
unset lua_workdir
unset lua_binary
unset lua_min_version
unset lua_max_version
unset lua_act_version
